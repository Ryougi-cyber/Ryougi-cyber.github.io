<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java基础01:注释，标识符，数据类型，变量，常量</title>
    <link href="/2022/06/07/Java%E5%9F%BA%E7%A1%8001-%E6%B3%A8%E9%87%8A%EF%BC%8C%E6%A0%87%E8%AF%86%E7%AC%A6%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F/"/>
    <url>/2022/06/07/Java%E5%9F%BA%E7%A1%8001-%E6%B3%A8%E9%87%8A%EF%BC%8C%E6%A0%87%E8%AF%86%E7%AC%A6%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h2><p>注释就是对代码的解释和说明。目的是为了让别人和自己很容易看懂，一看就知道这段代码是做什么用的。正确的程序注释一般包括序言性注释和功能性注释。序言性注释的主要内容包括模块的接口、数据的描述和模块的功能。模块的功能性注释的主要内容包括程序段的功能、语句的功能和数据的状态，注释不会被计算机编译。</p><p><code>注释</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args)&#123;<br>   rl01 rl01 = <span class="hljs-built_in">new</span> rl01();<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(rl01.name);<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(name2);<br>   //pulic static <span class="hljs-type">void</span> main 快捷操作：psvm<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;hello world&quot;);<br>   //<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println 快捷操作：sout<br>   &#125;<br></code></pre></td></tr></table></figure><p>单行注释方法：<code>//注释内容</code><br>多行注释方法：<code>/*注释内容*/</code><br>文档注释方法：<code>/**注释内容*/</code></p><h2 id="标识符："><a href="#标识符：" class="headerlink" title="标识符："></a>标识符：</h2><p>Java的所有组成部分都需要名字。类名、变量名、方法名都被称为标识符。<br>关键字是被JAVA编译器占用的拥有特殊含义的字符串。<br>所有的标识符都应以字母（A-Z和a-z）、美元符号（$）、下划线（_）开头。<br>首字符之后可以是字母、数字、美元符号和下划线的任何字符组合。<br>不能使用关键字作为变量名或者方法名。<br>标识符是大小写敏感的（严格区分大小写）。</p><h2 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h2><p>强类型语言：要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用。<br>弱类型语言：变量的使用不用严格符合规定，变量不必先定义才能使用。<br>Java是强类型语言。<br>Java的数据类型分为两大类：基本类型（primitive type），引用类型（reference type）。<br>基本数据类型有：数值类型和Boolean类型（布尔值）。<br>8大基本数据类型：byte（字节型）、char（字符型）、short（短整数型）、int（整数型）、long（长整数型）、float（单精度浮点型）、double（双精度浮点型）、Boolean类型（false、true）。  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//8大基本数据类型</span><br><span class="hljs-comment">//整数型</span><br><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">15</span>;<br><span class="hljs-keyword">byte</span> num2 = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">short</span> num3 = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">long</span> num4 = <span class="hljs-number">114514L</span>;<br><span class="hljs-comment">//浮点数型</span><br><span class="hljs-keyword">float</span> num5 = <span class="hljs-number">3.14f</span>;<br><span class="hljs-keyword">double</span> num6 = <span class="hljs-number">3.1415926</span>;<br><span class="hljs-comment">//字符型</span><br><span class="hljs-keyword">char</span> <span class="hljs-keyword">word</span> = <span class="hljs-string">&#x27;啊&#x27;</span>;<br><span class="hljs-comment">//字符串不属于基本类型属于引用类型</span><br><span class="hljs-comment">//布尔值Boolean</span><br><span class="hljs-keyword">boolean</span> bl1 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">boolean</span> bl2 = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>引用数据类型有：类、接口、数组。<br>数据类型长度：<br>byte占用1字节，char占用2字节，short占用2字节，int占用4字节，long占用8字节，float占用4字节，double占用8字节，Boolean值占用1字节。<br>什么是字节：<br>位（bit）：是计算机内部 数据储存 的最小单位，通常把一位二进制数字称为1bit，如11001100就是一个8位二进制数。<br>字节（byte）：是计算机中 数据处理 的基本单位，一般用 B 来表示。<br>1B（byte，字节） = 8bit（位）<br>字符：是指计算机中使用的字母、数字、字、符号。  </p><h3 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h3><p>由于Java是强类型语言，所以要进行有些运算时需要强制转换，运算时需要把不同类型的数据转换为相同类型数据后再进行运算。<br>强制转换：类型 变量名 =（类型）变量（或者变量名）；<br>当需要把范围大的类型转换为范围小的类型时需要进行强制类型转换，范围小的类型转换为范围大的类型时会进行自动转换。</p><p>注意事项：<br>不能对布尔值进行数据转换.<br>不能把对象类型转换为不相干的类型.<br>转换的时候可能会出现内存溢出或者精度问题.<br>在进行很大的数据运算时注意可能会出现内存溢出的问题.</p><h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><p>变量的定义：<br>在程序运行期间，随时可能产生一些临时数据，应用程序会将这些数据保存在一些内存单元中，每个内存单元都用一个标识符来标识。这些内存单元被称为变量，定义的标识符就是变量名，内存单元中存储的数据就是变量的值。  </p><p>Java变量是程序中最基本的存储单元，其要素包含变量名、变量类型和作用域。<br>Java支持3种不同的变量类型：类变量、实例变量、局部变量<br>不同的变量类型其作用域也各不相同。<br>局部变量存在于方法内，使用前必须声明和初始化值。<br>实例变量存在于类里方法外，从属于对象，如果不自行初始化值，该变量值为默认值，使用前必须先new一个当前类的实例对象。<br>类变量存在于类里方法外，变量类型前用static修饰，可以直接在该类的方法中调用。  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> nmm = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//变量的声明方法为 变量类型 变量名 = 变量值；</span><br><span class="hljs-built_in">int</span> nn1 = <span class="hljs-number">22</span>,nn2 = <span class="hljs-number">1112</span>;<br><span class="hljs-comment">//可以同时声明多个同类型变量，但会降低代码可读性，尽量不要如此声明</span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t1 = <span class="hljs-number">10</span>;<br>    System.out.<span class="hljs-built_in">println</span>(t1);<br>    <span class="hljs-comment">//局部变量存在于方法内，使用前必须声明和初始化值</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h2><p>常量是初始化之后无法改变的值，可以理解为特殊的变量，它的值在设定后，在程序的运行中不允许被改变。<br>常量名一般使用大写字符。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> CI1 = <span class="hljs-number">11</span>;<br><span class="hljs-comment">//常量的定义方法为在常量类型前用final修饰</span><br></code></pre></td></tr></table></figure><p>变量的命名规范：<br>所有的变量、方法、类名应尽量做到见名知意。<br>类成员变量应遵循首字母小写和驼峰原则，如：monthSalary<br>局部变量应遵循首字母小写和驼峰原则。<br>常量使用大写字符，分隔时用下划线，如：MAX_VALUE<br>类名：首字母大写和驼峰原则，如：Man，GoodMan<br>方法名：首字母小写和驼峰原则，如：run（），runRun（）  </p><p>注意事项：<br>每个变量都有类型，类型可以是基本类型也可以是引用类型.<br>变量名必须是合法的标识符.<br>变量声明是一条完整的语句，因此每一个声明都必须以分号结束.  </p><hr><p>ps:<br><em>1bit表示1位。</em><br><em>1Byte表示一字节 1B = 8b</em><br><em>1024B = 1KB</em><br><em>1024KB = 1M</em><br><em>1024M = 1G</em><br><em>布尔值的默认值是false，数值的默认值是0，字符型的默认值是null，8大基本类型以外的类型默认值都为null。</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK、JRE、JVM</title>
    <link href="/2021/11/13/jjj/"/>
    <url>/2021/11/13/jjj/</url>
    
    <content type="html"><![CDATA[<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>  即：Java Development Kit –Java的开发工具包 ，其中包含了JRE和java开发工具。JDK是java的最小开发环境，所以JDK是java语言的开发核心。</p><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>  即：Java Runtime Environment–java运行时环境，其中包含了JVM和java程序运行时必需的环境，是java程序的最小运行环境。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>  即：Java Virtual Machine–java虚拟机，它负责加载并运行.class文件（字节码文件）。JVM把java文件转化为系统能够理解的指令，不同的操作系统有着与之对应的JVM，同一段java代码通过不同平台的JVM能实现相同的功能，所以JVM是java程序能够跨平台运行的核心。</p><p>ps：<em>程序员在ide上编写的代码称为源代码，源代码在经过编译后会生成相应的字节码（.class)文件，JVM处理的是字节码文件。</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些基础的DOS命令</title>
    <link href="/2021/11/13/dos/"/>
    <url>/2021/11/13/dos/</url>
    
    <content type="html"><![CDATA[<p>盘符切换：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos"># 盘符名:<br># 如：<br># C:<br></code></pre></td></tr></table></figure><p>查看当前目录下的所有文件：</p><p><code># dir</code></p><p>切换目录：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># cd</span><br><span class="hljs-meta"># 即 change directory</span><br><span class="hljs-meta"># 通过 cd /d 盘符名:\目录名  可实现跨盘符切换目录</span><br><span class="hljs-meta"># cd..  返回上一级目录</span><br></code></pre></td></tr></table></figure><p>文件操作：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># md 文件夹名  创建一个文件夹</span><br><span class="hljs-meta"># cd&gt;文件名.文件类型后缀  创建一个文件</span><br><span class="hljs-meta"># rd  删除目录（文件夹）  在删除文件夹时需要文件夹为空</span><br><span class="hljs-meta"># del 删除文件</span><br></code></pre></td></tr></table></figure><p>其他：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># cls  清楚屏幕</span><br><span class="hljs-meta"># exit  退出</span><br><span class="hljs-meta"># ipconfig  查看当前电脑ip</span><br><span class="hljs-meta"># notepad 打开一个记事本</span><br></code></pre></td></tr></table></figure><p>JAVA相关操作：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># java -version 查看java版本</span><br><span class="hljs-meta"># javac 文件名.java  编译java文件</span><br><span class="hljs-meta"># java 文件名  运行.class文件</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown的一些基础语法</title>
    <link href="/2021/11/12/blog-test/"/>
    <url>/2021/11/12/blog-test/</url>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>一级标题写法是#+空格+标题名</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>二级标题写法是##+空格+标题名</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>三级标题写法是###+空格+标题名</p><p><strong>加粗</strong></p><p>加粗字体在内容前后加上”**“</p><p><em>斜体</em></p><p>斜体字体在内容前后加上”*“</p><p><del>横线</del></p><p>删除线在内容前后加上”~~“</p><p>*无序列表</p><p>*无序列表</p><p>无序列表在内容前加”*“或”-“</p><p>1.有序列表</p><p>2.有序列表</p><p>有序列表在内容前加数字和 ”. “</p><p>换行方式：  </p><p>段落中换行使用:<code>&lt;br /&gt;</code>  </p><p>例如：  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">床前明月光，&lt;<span class="hljs-keyword">br</span> /&gt;疑是地上霜<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>床前明月光，<br>疑是地上霜</p><p>普通句子中换行（1）：</p><p>使用<code>\</code>,然后按下<code>Enter</code></p><p>例如：  </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">床前明月光，<span class="hljs-string">\</span><br>疑是地上霜<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>床前明月光，<br>疑是地上霜</p><p>普通句子中换行（2）：</p><p>输入两个空格<code>  </code>，然后按下<code>Enter</code></p><p>例如：  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">床前明月光，  <br>疑是地上霜<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>床前明月光<br>疑是地上霜</p><p>内嵌代码：</p><p>内嵌代码被包裹在一对”`”中</p><p><code>内嵌代码</code></p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">public static void main(String[]args)&#123;<br><span class="hljs-code">        system out println(&quot;hello,world!&quot;)</span><br><span class="hljs-code">        &#125;</span><br></code></pre></td></tr></table></figure><p>代码块被包裹在三对”`”中</p><p><a href="https://www.baidu.com/">链接：此处为百度</a><br>链接写法为[]+(),其中[]中写链接描述，()中写链接内容</p><p><a href="https://www.baidu.com/" title="百度">带title的链接</a><br>在()中的链接后跟空格+”title”，可使链接带title</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><img src="/2021/11/12/blog-test/20211004_233643.jpg"></p><p>图片写法与链接相似为，!+[]+()，[]中写图片描述，()中写图片位置</p><h1 id="带title图片"><a href="#带title图片" class="headerlink" title="带title图片"></a>带title图片</h1><p><img src="/2021/11/12/blog-test/20211004_233643.jpg" title="卤豆腐"></p><p>带title的图片写法与链接带title的方法一致</p><p>关于hexo中图片无法正常显示的问题<br>需要把根目录下 _config.yml 中的 post_asset_folder 改为 true<br>需要一个与文章同名的同级文件夹，把所需的图片放到该文件夹当中<br>可能需要用到插件”<a href="https://github.com/CodeFalling/hexo-asset-image&quot;">https://github.com/CodeFalling/hexo-asset-image&quot;</a><br>文件路径最好是相对路径</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p>引用<br>阿萨大大<br>啊大大</p></blockquote><p>在内容前加&gt;可使内容变为引用内容</p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th>姓名</th><th align="left">年龄</th><th align="right">爱好</th></tr></thead><tbody><tr><td>aaa</td><td align="left">bbb</td><td align="right">ccc</td></tr><tr><td>aab</td><td align="left">aac</td><td align="right">aad</td></tr></tbody></table><p>表格书写方式：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 姓名 </span>|<span class="hljs-string"> 年龄 </span>|<span class="hljs-string"> 爱好 </span>|<br>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> :--- </span>|<span class="hljs-string"> ---: </span>|<br>|<span class="hljs-string"> aaa </span>|<span class="hljs-string"> bbb </span>|<span class="hljs-string"> ccc </span>|<br>|<span class="hljs-string"> aab </span>|<span class="hljs-string"> aac </span>|<span class="hljs-string"> aad </span>|<br></code></pre></td></tr></table></figure><p>分割线</p><hr><p>分割线写法为三个*</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
